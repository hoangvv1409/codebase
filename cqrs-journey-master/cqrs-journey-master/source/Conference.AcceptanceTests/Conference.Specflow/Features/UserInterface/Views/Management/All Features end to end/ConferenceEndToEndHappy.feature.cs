// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Conference.Specflow.Features.UserInterface.Views.Management.AllFeaturesEndToEnd
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EndToEndSuccessfulConferenceConfigurationScenariosForCreatingAndEditingConferenceSettingsFeature : Xunit.IUseFixture<EndToEndSuccessfulConferenceConfigurationScenariosForCreatingAndEditingConferenceSettingsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ConferenceEndToEndHappy.feature"
#line hidden
        
        public EndToEndSuccessfulConferenceConfigurationScenariosForCreatingAndEditingConferenceSettingsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "End to end successful Conference configuration scenarios for creating and editing" +
                    " Conference settings", "In order to create or update a Conference configuration\r\nAs a Business Customer\r\n" +
                    "I want to be able to create or update a Conference and set its properties", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 20
#line 21
testRunner.Given("the Business Customer selected the Create Conference option");
#line hidden
        }
        
        public virtual void SetFixture(EndToEndSuccessfulConferenceConfigurationScenariosForCreatingAndEditingConferenceSettingsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "End to end successful Conference configuration scenarios for creating and editing" +
            " Conference settings")]
        [Xunit.TraitAttribute("Description", "A new Conference is created with the required information")]
        public virtual void ANewConferenceIsCreatedWithTheRequiredInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new Conference is created with the required information", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Owner",
                        "Email",
                        "Name",
                        "Description",
                        "Slug",
                        "Start",
                        "End"});
            table1.AddRow(new string[] {
                        "Gregory Weber",
                        "gregoryweber@contoso.com",
                        "CQRS2012P",
                        "CQRS summit 2012 conference (Create)",
                        "random",
                        "05/02/2012",
                        "05/12/2012"});
#line 24
testRunner.Given("this conference information", ((string)(null)), table1);
#line 27
testRunner.When("the Business Customer proceed to create the Conference");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Owner",
                        "Email",
                        "AccessCode"});
            table2.AddRow(new string[] {
                        "Gregory Weber",
                        "gregoryweber@contoso.com",
                        "random"});
#line 28
testRunner.Then("following details will be shown for the created Conference", ((string)(null)), table2);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "End to end successful Conference configuration scenarios for creating and editing" +
            " Conference settings")]
        [Xunit.TraitAttribute("Description", "Seat Types are created and assigned to an existing Conference")]
        public virtual void SeatTypesAreCreatedAndAssignedToAnExistingConference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Seat Types are created and assigned to an existing Conference", new string[] {
                        "Ignore"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Owner",
                        "Email",
                        "Name",
                        "Description",
                        "Slug",
                        "Start",
                        "End"});
            table3.AddRow(new string[] {
                        "Gregory Weber",
                        "gregoryweber@contoso.com",
                        "CQRS2012S",
                        "CQRS summit 2012 conference (Seat Assignment)",
                        "cqrs2012p",
                        "05/02/2012",
                        "05/12/2012"});
#line 35
testRunner.Given("an existing unpublished conference with this information", ((string)(null)), table3);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "Quantity",
                        "Price"});
            table4.AddRow(new string[] {
                        "GENADM",
                        "General admission",
                        "100",
                        "199"});
#line 38
testRunner.And("the information for the new Seat Types", ((string)(null)), table4);
#line 41
testRunner.When("the Business Customer proceed to create the Seat Types");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "Quantity",
                        "Price"});
            table5.AddRow(new string[] {
                        "GENADM",
                        "General admission",
                        "100",
                        "199,00"});
#line 42
testRunner.Then("the new Seat Types with this information are created", ((string)(null)), table5);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "End to end successful Conference configuration scenarios for creating and editing" +
            " Conference settings")]
        [Xunit.TraitAttribute("Description", "Create a new Promotional Code")]
        public virtual void CreateANewPromotionalCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new Promotional Code", new string[] {
                        "Ignore"});
#line 48
this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Promotional Code",
                        "Discount",
                        "Quota",
                        "Scope",
                        "Cumulative"});
            table6.AddRow(new string[] {
                        "SPEAKER123",
                        "100%",
                        "Unlimited",
                        "All",
                        ""});
#line 49
testRunner.Given("the Promotional Codes", ((string)(null)), table6);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quota"});
            table7.AddRow(new string[] {
                        "General admission",
                        "500"});
            table7.AddRow(new string[] {
                        "CQRS Workshop",
                        "100"});
            table7.AddRow(new string[] {
                        "Additional cocktail party",
                        "600"});
#line 52
testRunner.And("the Seat Types configuration", ((string)(null)), table7);
#line 57
testRunner.And("the Business Customer proceed to create a Promotional Code");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Discount",
                        "Quota",
                        "Scope",
                        "Cumulative"});
            table8.AddRow(new string[] {
                        "10%",
                        "Unlimited",
                        "General admission",
                        "SPEAKER123"});
#line 58
testRunner.And("the Business Customer enter the \'NEWCODE\' Promotional Code and these attributes", ((string)(null)), table8);
#line 61
testRunner.When("the Business Customer proceed to save the new information");
#line 62
testRunner.Then("the new Promotional Code is added to the list of existing codes");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                EndToEndSuccessfulConferenceConfigurationScenariosForCreatingAndEditingConferenceSettingsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                EndToEndSuccessfulConferenceConfigurationScenariosForCreatingAndEditingConferenceSettingsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
