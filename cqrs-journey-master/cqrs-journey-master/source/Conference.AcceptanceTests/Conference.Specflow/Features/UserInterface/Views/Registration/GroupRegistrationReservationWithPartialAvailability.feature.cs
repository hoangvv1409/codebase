// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Conference.Specflow.Features.UserInterface.Views.Registration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegistrantScenariosForRegisteringAGroupOfAttendeesForAConferenceWhenFewSeatsAreAvailableInAllTheSeatTypesFeature : Xunit.IUseFixture<RegistrantScenariosForRegisteringAGroupOfAttendeesForAConferenceWhenFewSeatsAreAvailableInAllTheSeatTypesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GroupRegistrationReservationWithPartialAvailability.feature"
#line hidden
        
        public RegistrantScenariosForRegisteringAGroupOfAttendeesForAConferenceWhenFewSeatsAreAvailableInAllTheSeatTypesFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Registrant scenarios for registering a group of Attendees for a conference when f" +
                    "ew Seats are available in all the Seat Types", "In order to register for conference a group of Attendees\r\nAs a Registrant\r\n  I wa" +
                    "nt to be able to select Order Items from one or many of the available and or wai" +
                    "tlisted Order Items and make a Reservation", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 20
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "rate",
                        "quota"});
            table1.AddRow(new string[] {
                        "General admission",
                        "$199",
                        "20"});
            table1.AddRow(new string[] {
                        "CQRS Workshop",
                        "$500",
                        "20"});
            table1.AddRow(new string[] {
                        "Additional cocktail party",
                        "$50",
                        "20"});
#line 21
  testRunner.Given("the list of the available Order Items for the CQRS summit 2012 conference", ((string)(null)), table1);
#line hidden
        }
        
        public virtual void SetFixture(RegistrantScenariosForRegisteringAGroupOfAttendeesForAConferenceWhenFewSeatsAreAvailableInAllTheSeatTypesFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Registrant scenarios for registering a group of Attendees for a conference when f" +
            "ew Seats are available in all the Seat Types")]
        [Xunit.TraitAttribute("Description", "All the Order Items are selected and none are available, then none get reserved")]
        public virtual void AllTheOrderItemsAreSelectedAndNoneAreAvailableThenNoneGetReserved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All the Order Items are selected and none are available, then none get reserved", ((string[])(null)));
#line 29
 this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table2.AddRow(new string[] {
                        "General admission",
                        "3"});
            table2.AddRow(new string[] {
                        "CQRS Workshop",
                        "1"});
            table2.AddRow(new string[] {
                        "Additional cocktail party",
                        "2"});
#line 30
  testRunner.Given("the selected Order Items", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type"});
            table3.AddRow(new string[] {
                        "General admission"});
            table3.AddRow(new string[] {
                        "CQRS Workshop"});
            table3.AddRow(new string[] {
                        "Additional cocktail party"});
#line 35
 testRunner.And("these Seat Types become unavailable before the Registrant makes the reservation", ((string)(null)), table3);
#line 40
 testRunner.When("the Registrant proceeds to make the Reservation with seats already reserved");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "selected",
                        "message"});
            table4.AddRow(new string[] {
                        "General admission",
                        "0",
                        "Sold out"});
            table4.AddRow(new string[] {
                        "CQRS Workshop",
                        "0",
                        "Sold out"});
            table4.AddRow(new string[] {
                        "Additional cocktail party",
                        "0",
                        "Sold out"});
#line 41
 testRunner.Then("the Registrant is offered to select any of these available seats", ((string)(null)), table4);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Registrant scenarios for registering a group of Attendees for a conference when f" +
            "ew Seats are available in all the Seat Types")]
        [Xunit.TraitAttribute("Description", "All the Order Items are selected, one partially available and one not available, " +
            "then one gets reserved, one gets partially reserved and one does not get reserve" +
            "d")]
        public virtual void AllTheOrderItemsAreSelectedOnePartiallyAvailableAndOneNotAvailableThenOneGetsReservedOneGetsPartiallyReservedAndOneDoesNotGetReserved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All the Order Items are selected, one partially available and one not available, " +
                    "then one gets reserved, one gets partially reserved and one does not get reserve" +
                    "d", ((string[])(null)));
#line 50
 this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table5.AddRow(new string[] {
                        "General admission",
                        "3"});
            table5.AddRow(new string[] {
                        "CQRS Workshop",
                        "11"});
            table5.AddRow(new string[] {
                        "Additional cocktail party",
                        "1"});
#line 51
 testRunner.Given("the selected Order Items", ((string)(null)), table5);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table6.AddRow(new string[] {
                        "CQRS Workshop",
                        "10"});
            table6.AddRow(new string[] {
                        "Additional cocktail party",
                        ""});
#line 56
 testRunner.And("these Seat Types become unavailable before the Registrant makes the reservation", ((string)(null)), table6);
#line 60
 testRunner.When("the Registrant proceeds to make the Reservation with seats already reserved");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "selected",
                        "message"});
            table7.AddRow(new string[] {
                        "General admission",
                        "0",
                        ""});
            table7.AddRow(new string[] {
                        "CQRS Workshop",
                        "10",
                        "Could not reserve all the requested seats."});
            table7.AddRow(new string[] {
                        "Additional cocktail party",
                        "0",
                        "Sold out"});
#line 61
 testRunner.Then("the Registrant is offered to select any of these available seats", ((string)(null)), table7);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table8.AddRow(new string[] {
                        "General admission",
                        "3"});
#line 66
 testRunner.And("the selected Order Items", ((string)(null)), table8);
#line 69
 testRunner.And("the total should read $5597");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Registrant scenarios for registering a group of Attendees for a conference when f" +
            "ew Seats are available in all the Seat Types")]
        [Xunit.TraitAttribute("Description", "All the Order Items are selected, two are partially available and one none availa" +
            "ble, then two get partially reserved and one not")]
        public virtual void AllTheOrderItemsAreSelectedTwoArePartiallyAvailableAndOneNoneAvailableThenTwoGetPartiallyReservedAndOneNot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All the Order Items are selected, two are partially available and one none availa" +
                    "ble, then two get partially reserved and one not", ((string[])(null)));
#line 74
 this.ScenarioSetup(scenarioInfo);
#line 20
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table9.AddRow(new string[] {
                        "General admission",
                        "7"});
            table9.AddRow(new string[] {
                        "CQRS Workshop",
                        "12"});
            table9.AddRow(new string[] {
                        "Additional cocktail party",
                        "9"});
#line 75
 testRunner.Given("the selected Order Items", ((string)(null)), table9);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table10.AddRow(new string[] {
                        "General admission",
                        "20"});
            table10.AddRow(new string[] {
                        "CQRS Workshop",
                        "10"});
            table10.AddRow(new string[] {
                        "Additional cocktail party",
                        "10"});
#line 80
 testRunner.And("these Seat Types become unavailable before the Registrant makes the reservation", ((string)(null)), table10);
#line 85
 testRunner.And("the Registrant proceeds to make the Reservation with seats already reserved");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "selected",
                        "message"});
            table11.AddRow(new string[] {
                        "General admission",
                        "0",
                        "Sold out"});
            table11.AddRow(new string[] {
                        "CQRS Workshop",
                        "10",
                        "Could not reserve all the requested seats."});
            table11.AddRow(new string[] {
                        "Additional cocktail party",
                        "0",
                        ""});
#line 86
 testRunner.And("the Registrant is offered to select any of these available seats", ((string)(null)), table11);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table12.AddRow(new string[] {
                        "CQRS Workshop",
                        "10"});
            table12.AddRow(new string[] {
                        "Additional cocktail party",
                        "9"});
#line 91
 testRunner.And("the selected Order Items", ((string)(null)), table12);
#line 95
 testRunner.And("the total should read $5450");
#line 96
 testRunner.When("the Registrant proceeds to make the Reservation");
#line 97
 testRunner.Then("the Reservation is confirmed for all the selected Order Items");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "seat type",
                        "quantity"});
            table13.AddRow(new string[] {
                        "CQRS Workshop",
                        "10"});
            table13.AddRow(new string[] {
                        "Additional cocktail party",
                        "9"});
#line 98
 testRunner.And("these Order Items should be reserved", ((string)(null)), table13);
#line 102
 testRunner.And("the total should read $5450");
#line 103
 testRunner.And("the countdown is started");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RegistrantScenariosForRegisteringAGroupOfAttendeesForAConferenceWhenFewSeatsAreAvailableInAllTheSeatTypesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RegistrantScenariosForRegisteringAGroupOfAttendeesForAConferenceWhenFewSeatsAreAvailableInAllTheSeatTypesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
