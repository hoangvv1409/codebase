// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Conference.Specflow.Features.UserInterface.Views.Management.AllFeaturesEndToEnd
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EndToEndFailureConferenceConfigurationScenariosForCreatingAndEditingConferenceSettingsFeature : Xunit.IUseFixture<EndToEndFailureConferenceConfigurationScenariosForCreatingAndEditingConferenceSettingsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ConferenceEndToEndSad.feature"
#line hidden
        
        public EndToEndFailureConferenceConfigurationScenariosForCreatingAndEditingConferenceSettingsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "End to end failure Conference configuration scenarios for creating and editing Co" +
                    "nference settings", "In order to create or update a Conference configuration\r\nAs a Business Customer\r\n" +
                    "I want to be able to create or update a Conference and set its properties", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(EndToEndFailureConferenceConfigurationScenariosForCreatingAndEditingConferenceSettingsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "End to end failure Conference configuration scenarios for creating and editing Co" +
            "nference settings")]
        [Xunit.TraitAttribute("Description", "Incomplete information for creating a new Conference")]
        public virtual void IncompleteInformationForCreatingANewConference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incomplete information for creating a new Conference", new string[] {
                        "Ignore"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "End to end failure Conference configuration scenarios for creating and editing Co" +
            "nference settings")]
        [Xunit.TraitAttribute("Description", "Duplicate Slug from an existing Conference")]
        public virtual void DuplicateSlugFromAnExistingConference()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicate Slug from an existing Conference", new string[] {
                        "Ignore"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                EndToEndFailureConferenceConfigurationScenariosForCreatingAndEditingConferenceSettingsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                EndToEndFailureConferenceConfigurationScenariosForCreatingAndEditingConferenceSettingsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
